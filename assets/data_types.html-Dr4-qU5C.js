import{_ as a,c as n,b as s,o as i}from"./app-D8TzdTQy.js";const l={};function r(d,e){return i(),n("div",null,e[0]||(e[0]=[s(`<h2 id="типы-данных-в-carbon" tabindex="-1"><a class="header-anchor" href="#типы-данных-в-carbon"><span>Типы данных в Carbon</span></a></h2><p>Carbon - строго типизированный язык, где каждый переменная и выражение имеют явно опредленный тип. Это повышает безопасность кода и позволяет компилятору эффективно оптимизировть программу. Основные категории типов данных:</p><h3 id="примитивные-типы" tabindex="-1"><a class="header-anchor" href="#примитивные-типы"><span>Примитивные типы</span></a></h3><ul><li>Целые числа <ul><li>Знаковыe: <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code> (8, 16, 32, 64 бит соответственно)</li><li>Беззнаковые <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>.</li><li>Пример использования:<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var age: i32 = 25;</span>
<span class="line">var flags: u8 = 0b1010;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>Числа с плавающей точкой: <ul><li><code>f32</code> (32 бита), <code>f64</code> (64 бит).</li><li>Пример использования:<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var pi: f64 = 3.1415926535;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li>Булев тип <ul><li><code>bool</code>: принимает <code>true</code> или <code>false</code>.<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var isReady: bool = true;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li>Символы: <ul><li><code>char</code>: 8-битный символ (UTF-8).<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var letter: char = \`A\`;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="строки-strings" tabindex="-1"><a class="header-anchor" href="#строки-strings"><span>Строки (Strings)</span></a></h3><ul><li><code>String</code>: динамическая строка в кодировке UTF-8.<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var greeting: String = &quot;Hello, Carbon&quot;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="составные-типы" tabindex="-1"><a class="header-anchor" href="#составные-типы"><span>Составные типы</span></a></h3><ul><li>Массивы: <ul><li>фиксировнного размера: <code>[тип; размер]</code>.</li><li>Динамические массивы: исполюзуют стандартную библиотеку (например, <code>Array&lt;T&gt;</code>).</li></ul></li><li>Кортежи: <ul><li>Группа значений разных типов.<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var userData: (i32, String) = (25, &quot;Alice&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li>Структуры (Structs): <ul><li>Пользовательские типы с именоваными полями.<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">struct Point {</span>
<span class="line">  x: f64.</span>
<span class="line">  y: f64,</span>
<span class="line">}</span>
<span class="line">var origin: Point = {x: 0.0, y: 0.0};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="указатели-и-ссылки-pointers-references" tabindex="-1"><a class="header-anchor" href="#указатели-и-ссылки-pointers-references"><span>Указатели и ссылки (Pointers &amp; References):</span></a></h3><ul><li>Сырые указатели (T*): Используются для низкоуровневых операций (требует осторожности).<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var num: i32 = 42;</span>
<span class="line">var ptr: i32* = &amp;num;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Умные указатели: Например, <code>Box&lt;T&gt;</code> для данных в куче (управление памятью через RAII).<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var boxedValue: Box&lt;i32&gt; = Box.new(100);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="специальные-типы" tabindex="-1"><a class="header-anchor" href="#специальные-типы"><span>Специальные типы</span></a></h3><ul><li><code>Option&lt;T&gt;</code>: Обработка отсутствующих значений (аналог <code>Optional</code> в Swift или <code>std::optional</code> в C++).<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var maybeNumber: Option&lt;i32&gt; = Option.none();</span>
<span class="line">maybeNumber = Option.some(10);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>Result&lt;T, E&gt;</code>: Для обработки ошибок вместо исключений. Содержит либо успешный результат (<code>Ok</code>), либо ошибку (<code>Err</code>).<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">fn divide(a: f64, b: f64) -&gt; Result&lt;f64, String&gt; {</span>
<span class="line">  if (b == 0.0) {</span>
<span class="line">    return Result.Err(&quot;Division by zero&quot;);</span>
<span class="line">  }</span>
<span class="line">  return Result.Ok(a / b);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,12)]))}const t=a(l,[["render",r]]),o=JSON.parse('{"path":"/handbook/common-concepts/data_types.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1744348402000,"contributors":[{"name":"Kuroi","username":"Kuroi","email":"fantom_play13@mail.ru","commits":1,"url":"https://github.com/Kuroi"},{"name":"mkcre","username":"mkcre","email":"99949382+mkcre@users.noreply.github.com","commits":2,"url":"https://github.com/mkcre"}],"changelog":[{"hash":"107abd03b0a312a3d1856c71093b6dba0cdce28d","time":1744348402000,"email":"99949382+mkcre@users.noreply.github.com","author":"mkcre","message":"Update data_types.md"},{"hash":"1a289bedd89efe488cb66bb000314d12555b2aba","time":1744347861000,"email":"99949382+mkcre@users.noreply.github.com","author":"mkcre","message":"Update data_types.md"},{"hash":"d3708e4e0b4794b9c2d30db0f5c1cbd23b5a5de8","time":1743220336000,"email":"fantom_play13@mail.ru","author":"Kuroi","message":"init"}]},"filePathRelative":"handbook/common-concepts/data_types.md"}');export{t as comp,o as data};
