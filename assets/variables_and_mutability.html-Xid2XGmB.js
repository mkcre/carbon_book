import{_ as a,c as n,b as s,o as i}from"./app-hCcNfTN4.js";const l={};function r(c,e){return i(),n("div",null,e[0]||(e[0]=[s(`<h2 id="переменные-и-изменяемость-variables-mutability-в-carbon" tabindex="-1"><a class="header-anchor" href="#переменные-и-изменяемость-variables-mutability-в-carbon"><span>Переменные и изменяемость (Variables &amp; Mutability) в Carbon</span></a></h2><p>В Carbon управление переменными и их изменяемостью строится на принципах безопасности и предсказуемости. Вот основные концепции:</p><hr><h3 id="объявление-переменных" tabindex="-1"><a class="header-anchor" href="#объявление-переменных"><span>Объявление переменных</span></a></h3><ul><li><code>var</code> - объявляет изменяемую переменную. Значение можно изменять после инициализации:<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var counter: i32 = 0;</span>
<span class="line">counter = 10; // correct</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>let</code> - объявляет неизменяемую переменную. Значение фиксируется при инициализации:<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">let max_users: i32 = 100;</span>
<span class="line">// max_users = 200; // error: cannot change const</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="вывод-типов" tabindex="-1"><a class="header-anchor" href="#вывод-типов"><span>Вывод типов</span></a></h3><p>Carbon автоматически определяет тип переменной, если он не указан явно:</p><div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var name = &quot;Carbon&quot;; // type: \`String\`</span>
<span class="line">let pi = 3.1415; // type: \`f64\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="изменяемость-mutability" tabindex="-1"><a class="header-anchor" href="#изменяемость-mutability"><span>Изменяемость (Mutability)</span></a></h3><ul><li>Переменные, объявленные через <code>var</code>, можно изменять в любой момент.</li><li>Переменные, объявленные через <code>let</code>, являются константами. Попытка изменить их приведет к ошибке компиляции.</li><li>Рекомендация: Используйте <code>let</code> по умолчанию, чтобы избежать случайных изменений. <code>var</code> применяйте только при необходимости.<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">fn calculate() {</span>
<span class="line">  let base = 5;</span>
<span class="line">  var result = 0;</span>
<span class="line"></span>
<span class="line">  for (var i = 0; i &lt; base; i++) {</span>
<span class="line">    result += i;</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="область-видимости" tabindex="-1"><a class="header-anchor" href="#область-видимости"><span>Область видимости</span></a></h3><ul><li>Переменные существуют только в блоке, где они объявлены (например, внутри функции, цикла или условия).</li><li>Затенение переменные (Shadowing): Можно объявлять новую переменную с тем же именем во вложенном блоке:<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">let x = 10;</span>
<span class="line">{</span>
<span class="line">  let x = &quot;text&quot;; // Допустимо, это новая переменнная во внутреннем блоке</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="инициализация" tabindex="-1"><a class="header-anchor" href="#инициализация"><span>Инициализация</span></a></h3><ul><li>Все переменные должны быть инициализированны перед использованием</li><li>Пример ошибки:<div class="language-carbon line-numbers-mode" data-highlighter="prismjs" data-ext="carbon"><pre><code><span class="line">var value: i32;</span>
<span class="line">Print(value); // Ошибка: \`value\` не инициализирована</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="итог" tabindex="-1"><a class="header-anchor" href="#итог"><span>Итог</span></a></h3><ul><li><code>var</code> - для изменяемых данных, <code>let</code> - для констант.</li><li>Строгий контроль типов и областей видимости повышает надежность кода.</li><li>Использование <code>let</code> по умолчанию помогает предотвратить случайные ошибки.</li></ul>`,21)]))}const t=a(l,[["render",r]]),o=JSON.parse('{"path":"/handbook/common-concepts/variables_and_mutability.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1744551603000,"contributors":[{"name":"mkcre","username":"mkcre","email":"99949382+mkcre@users.noreply.github.com","commits":1,"url":"https://github.com/mkcre"}],"changelog":[{"hash":"14bcbbc6904bf860d2b26b987ff8ad50d8260068","time":1744551603000,"email":"99949382+mkcre@users.noreply.github.com","author":"mkcre","message":"Update config.js"}]},"filePathRelative":"handbook/common-concepts/variables_and_mutability.md"}');export{t as comp,o as data};
